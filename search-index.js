var N=null,E="",T="t",U="u",searchIndex={};
var R=["Compress input data, ensuring that all input so far has…","Finished","result","error","usize","decompress","destatus","option","compress","costatus","take_output","compressparams","brotliencoder","Acquires a reference to the underlying stream","Acquires a mutable reference to the underlying stream","into_inner","brotli2","BrotliEncoder","BrotliDecoder","from_params","get_ref","get_mut","brotlidecoder","Unwrap the underlying writer, finishing the compression…","Create a new compression stream which will compress at the…","Creates a new encoder with a custom `CompressParams`.","Acquires a reference to the underlying writer.","Acquires a mutable reference to the underlying writer.","to_owned","clone_into","try_from","try_into","borrow_mut","brotli2::raw","type_id","borrow","typeid","brotli2::bufread","brotli2::read","brotli2::write","compressop","compressmode","formatter","CompressMode","CompressOp","CoStatus","DeStatus","Decompress","Compress","CompressParams"];

searchIndex["brotli2"]={"doc":"Brotli Compression/Decompression for Rust","i":[[3,R[49],R[16],"Parameters passed to various compression routines.",N,N],[4,R[43],E,"Possible choices for modes of compression",N,N],[13,"Generic",E,"Default compression mode, the compressor does not know…",0,N],[13,"Text",E,"Compression mode for utf-8 formatted text input.",0,N],[13,"Font",E,"Compression mode in WOFF 2.0.",0,N],[0,"raw",E,"Raw interface to in-memory compression/decompression streams",N,N],[3,R[47],R[33],"In-memory state for decompressing brotli-encoded data.",N,N],[3,R[48],E,"In-memory state for compressing/encoding data with brotli",N,N],[3,"Error",E,"Error that can happen from decompressing or compressing a…",N,N],[4,R[44],E,"Possible choices for the operation performed by the…",N,N],[13,"Process",E,"Compress input data",1,N],[13,"Flush",E,R[0],1,N],[13,"Finish",E,R[0],1,N],[13,"EmitMetadata",E,"Emit a metadata block to the stream, an opaque piece of…",1,N],[4,R[45],E,"Indication of whether a compression operation is…",N,N],[13,R[1],E,"The operation completed successfully",2,N],[13,"Unfinished",E,"The operation has more work to do and needs to be called…",2,N],[4,R[46],E,"Possible status results returned from decompressing.",N,N],[13,R[1],E,"Decompression was successful and has finished",3,N],[13,"NeedInput",E,"More input is needed to continue",3,N],[13,"NeedOutput",E,"More output is needed to continue",3,N],[5,"decompress_buf",E,"Decompress data in one go in memory.",N,[[],[[R[3]],[R[2],[R[4],R[3]]],[R[4]]]]],[5,"compress_buf",E,"Compresses the data in `input` into `output`.",N,[[[R[11]]],[[R[3]],[R[2],[R[4],R[3]]],[R[4]]]]],[11,"new",E,"Creates a new brotli decompression/decoding stream ready…",4,[[],[R[5]]]],[11,R[5],E,"Decompress some input data and write it to a buffer of…",4,[[["self"]],[[R[3]],[R[6]],[R[2],[R[6],R[3]]]]]],[11,R[10],E,"Retrieve a slice of the internal decompressor buffer up to…",4,[[["self"],[R[7],[R[4]]],[R[4]]],[R[7]]]],[11,"new",E,"Creates a new compressor ready to encode data into brotli",5,[[],[R[8]]]],[11,R[8],E,"Pass some input data to the compressor and write it to a…",5,[[["self"],[R[40]]],[[R[3]],[R[9]],[R[2],[R[9],R[3]]]]]],[11,R[10],E,"Retrieve a slice of the internal compressor buffer up to…",5,[[["self"],[R[7],[R[4]]],[R[4]]],[R[7]]]],[11,"set_params",E,"Configure the parameters of this compression session.",5,[[["self"],[R[11]]]]],[0,"bufread",R[16],"I/O streams for wrapping `BufRead` types as…",N,N],[3,R[17],R[37],"A brotli encoder, or compressor.",N,N],[3,R[18],E,"A brotli decoder, or decompressor.",N,N],[11,"new",E,"Creates a new encoder which will read uncompressed data…",6,[[["u32"],["r"]],[R[12]]]],[11,R[19],E,R[25],6,[[[R[11]],["r"]],[R[12]]]],[11,R[20],E,R[13],6,[[["self"]],["r"]]],[11,R[21],E,R[14],6,[[["self"]],["r"]]],[11,R[15],E,"Consumes this encoder, returning the underlying reader.",6,[[],["r"]]],[11,"new",E,"Creates a new decoder which will decompress data read from…",7,[[["r"]],[R[22]]]],[11,R[20],E,R[13],7,[[["self"]],["r"]]],[11,R[21],E,R[14],7,[[["self"]],["r"]]],[11,R[15],E,"Consumes this decoder, returning the underlying reader.",7,[[],["r"]]],[0,"read",R[16],"Reader-based compression/decompression streams",N,N],[3,R[17],R[38],"A compression stream which wraps an uncompressed stream of…",N,N],[3,R[18],E,"A decompression stream which wraps a compressed stream of…",N,N],[11,"new",E,R[24],8,[[["u32"],["r"]],[R[12]]]],[11,R[19],E,"Configure the compression parameters of this encoder.",8,[[[R[11]],["r"]],[R[12]]]],[11,R[20],E,R[13],8,[[["self"]],["r"]]],[11,R[21],E,R[14],8,[[["self"]],["r"]]],[11,R[15],E,R[23],8,[[],["r"]]],[11,"new",E,"Create a new decompression stream, which will read…",9,[[["r"]],[R[22]]]],[11,R[20],E,R[13],9,[[["self"]],["r"]]],[11,R[21],E,R[14],9,[[["self"]],["r"]]],[11,R[15],E,R[23],9,[[],["r"]]],[0,"write",R[16],"Writer-based compression/decompression streams",N,N],[3,R[17],R[39],"A compression stream which will have uncompressed data…",N,N],[3,R[18],E,"A compression stream which will have compressed data…",N,N],[11,"new",E,R[24],10,[[["w"],["u32"]],[R[12]]]],[11,R[19],E,R[25],10,[[["w"],[R[11]]],[R[12]]]],[11,R[20],E,R[26],10,[[["self"]],["w"]]],[11,R[21],E,R[27],10,[[["self"]],["w"]]],[11,"finish",E,"Consumes this encoder, flushing the output stream.",10,[[],[R[2]]]],[11,"new",E,"Creates a new decoding stream which will decode all input…",11,[[["w"]],[R[22]]]],[11,R[20],E,R[26],11,[[["self"]],["w"]]],[11,R[21],E,R[27],11,[[["self"]],["w"]]],[11,"finish",E,R[23],11,[[["self"]],[R[2]]]],[11,"new",R[16],"Creates a new default set of compression parameters.",12,[[],[R[11]]]],[11,"mode",E,"Set the mode of this compression.",12,[[["self"],[R[41]]],[R[11]]]],[11,"quality",E,"Controls the compression-speed vs compression-density…",12,[[["self"],["u32"]],[R[11]]]],[11,"lgwin",E,"Sets the base 2 logarithm of the sliding window size.",12,[[["self"],["u32"]],[R[11]]]],[11,"lgblock",E,"Sets the base 2 logarithm of the maximum input block size.",12,[[["self"],["u32"]],[R[11]]]],[11,"get_lgblock_readable",E,"Get the current block size",12,[[["self"]],[R[4]]]],[11,"get_lgblock",E,"Get the native lgblock size",12,[[["self"]],["u32"]]],[11,"get_lgwin_readable",E,"Get the current window size",12,[[["self"]],[R[4]]]],[11,"get_lgwin",E,"Get the native lgwin value",12,[[["self"]],["u32"]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[28],E,E,12,[[["self"]],[T]]],[11,R[29],E,E,12,[[[T],["self"]]]],[11,R[30],E,E,12,[[[U]],[R[2]]]],[11,R[31],E,E,12,[[],[R[2]]]],[11,R[35],E,E,12,[[["self"]],[T]]],[11,R[32],E,E,12,[[["self"]],[T]]],[11,R[34],E,E,12,[[["self"]],[R[36]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[28],E,E,0,[[["self"]],[T]]],[11,R[29],E,E,0,[[[T],["self"]]]],[11,R[30],E,E,0,[[[U]],[R[2]]]],[11,R[31],E,E,0,[[],[R[2]]]],[11,R[35],E,E,0,[[["self"]],[T]]],[11,R[32],E,E,0,[[["self"]],[T]]],[11,R[34],E,E,0,[[["self"]],[R[36]]]],[11,"into",R[33],E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[30],E,E,4,[[[U]],[R[2]]]],[11,R[31],E,E,4,[[],[R[2]]]],[11,R[35],E,E,4,[[["self"]],[T]]],[11,R[32],E,E,4,[[["self"]],[T]]],[11,R[34],E,E,4,[[["self"]],[R[36]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[30],E,E,5,[[[U]],[R[2]]]],[11,R[31],E,E,5,[[],[R[2]]]],[11,R[35],E,E,5,[[["self"]],[T]]],[11,R[32],E,E,5,[[["self"]],[T]]],[11,R[34],E,E,5,[[["self"]],[R[36]]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[28],E,E,13,[[["self"]],[T]]],[11,R[29],E,E,13,[[[T],["self"]]]],[11,"to_string",E,E,13,[[["self"]],["string"]]],[11,R[30],E,E,13,[[[U]],[R[2]]]],[11,R[31],E,E,13,[[],[R[2]]]],[11,R[35],E,E,13,[[["self"]],[T]]],[11,R[32],E,E,13,[[["self"]],[T]]],[11,R[34],E,E,13,[[["self"]],[R[36]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[28],E,E,1,[[["self"]],[T]]],[11,R[29],E,E,1,[[[T],["self"]]]],[11,R[30],E,E,1,[[[U]],[R[2]]]],[11,R[31],E,E,1,[[],[R[2]]]],[11,R[35],E,E,1,[[["self"]],[T]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[34],E,E,1,[[["self"]],[R[36]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[28],E,E,2,[[["self"]],[T]]],[11,R[29],E,E,2,[[[T],["self"]]]],[11,R[30],E,E,2,[[[U]],[R[2]]]],[11,R[31],E,E,2,[[],[R[2]]]],[11,R[35],E,E,2,[[["self"]],[T]]],[11,R[32],E,E,2,[[["self"]],[T]]],[11,R[34],E,E,2,[[["self"]],[R[36]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[28],E,E,3,[[["self"]],[T]]],[11,R[29],E,E,3,[[[T],["self"]]]],[11,R[30],E,E,3,[[[U]],[R[2]]]],[11,R[31],E,E,3,[[],[R[2]]]],[11,R[35],E,E,3,[[["self"]],[T]]],[11,R[32],E,E,3,[[["self"]],[T]]],[11,R[34],E,E,3,[[["self"]],[R[36]]]],[11,"into",R[37],E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[30],E,E,6,[[[U]],[R[2]]]],[11,R[31],E,E,6,[[],[R[2]]]],[11,R[35],E,E,6,[[["self"]],[T]]],[11,R[32],E,E,6,[[["self"]],[T]]],[11,R[34],E,E,6,[[["self"]],[R[36]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[30],E,E,7,[[[U]],[R[2]]]],[11,R[31],E,E,7,[[],[R[2]]]],[11,R[35],E,E,7,[[["self"]],[T]]],[11,R[32],E,E,7,[[["self"]],[T]]],[11,R[34],E,E,7,[[["self"]],[R[36]]]],[11,"into",R[38],E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[30],E,E,8,[[[U]],[R[2]]]],[11,R[31],E,E,8,[[],[R[2]]]],[11,R[35],E,E,8,[[["self"]],[T]]],[11,R[32],E,E,8,[[["self"]],[T]]],[11,R[34],E,E,8,[[["self"]],[R[36]]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[30],E,E,9,[[[U]],[R[2]]]],[11,R[31],E,E,9,[[],[R[2]]]],[11,R[35],E,E,9,[[["self"]],[T]]],[11,R[32],E,E,9,[[["self"]],[T]]],[11,R[34],E,E,9,[[["self"]],[R[36]]]],[11,"into",R[39],E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[30],E,E,10,[[[U]],[R[2]]]],[11,R[31],E,E,10,[[],[R[2]]]],[11,R[35],E,E,10,[[["self"]],[T]]],[11,R[32],E,E,10,[[["self"]],[T]]],[11,R[34],E,E,10,[[["self"]],[R[36]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[30],E,E,11,[[[U]],[R[2]]]],[11,R[31],E,E,11,[[],[R[2]]]],[11,R[35],E,E,11,[[["self"]],[T]]],[11,R[32],E,E,11,[[["self"]],[T]]],[11,R[34],E,E,11,[[["self"]],[R[36]]]],[11,"drop",R[33],E,4,[[["self"]]]],[11,"drop",E,E,5,[[["self"]]]],[11,"drop",R[39],E,10,[[["self"]]]],[11,"drop",E,E,11,[[["self"]]]],[11,"eq",R[33],E,1,[[["self"],[R[40]]],["bool"]]],[11,"eq",E,E,13,[[["self"],[R[3]]],["bool"]]],[11,"ne",E,E,13,[[["self"],[R[3]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[9]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[6]]],["bool"]]],[11,"eq",R[16],E,0,[[[R[41]],["self"]],["bool"]]],[11,"clone",R[33],E,1,[[["self"]],[R[40]]]],[11,"clone",E,E,13,[[["self"]],[R[3]]]],[11,"clone",E,E,2,[[["self"]],[R[9]]]],[11,"clone",E,E,3,[[["self"]],[R[6]]]],[11,"clone",R[16],E,0,[[["self"]],[R[41]]]],[11,"clone",E,E,12,[[["self"]],[R[11]]]],[11,"fmt",R[33],E,13,[[["self"],[R[42]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[42]]],[R[2]]]],[11,"fmt",E,E,13,[[["self"],[R[42]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[42]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[42]]],[R[2]]]],[11,"fmt",R[16],E,0,[[["self"],[R[42]]],[R[2]]]],[11,"fmt",E,E,12,[[["self"],[R[42]]],[R[2]]]],[11,"write",R[39],E,10,[[["self"]],[[R[4]],[R[2],[R[4]]]]]],[11,"flush",E,E,10,[[["self"]],[R[2]]]],[11,"write",E,E,11,[[["self"]],[[R[4]],[R[2],[R[4]]]]]],[11,"flush",E,E,11,[[["self"]],[R[2]]]],[11,"read",R[37],E,6,[[["self"]],[[R[4]],[R[2],[R[4]]]]]],[11,"read",E,E,7,[[["self"]],[[R[4]],[R[2],[R[4]]]]]],[11,"read",R[38],E,8,[[["self"]],[[R[4]],[R[2],[R[4]]]]]],[11,"read",E,E,9,[[["self"]],[[R[4]],[R[2],[R[4]]]]]],[11,"description",R[33],E,13,[[["self"]],["str"]]]],"p":[[4,R[43]],[4,R[44]],[4,R[45]],[4,R[46]],[3,R[47]],[3,R[48]],[3,R[17]],[3,R[18]],[3,R[17]],[3,R[18]],[3,R[17]],[3,R[18]],[3,R[49]],[3,"Error"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);